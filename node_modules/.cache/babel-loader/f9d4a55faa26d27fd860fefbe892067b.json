{"ast":null,"code":"function createRenderStep(runNextFrame) {\n  var toRun = [];\n  var toRunNextFrame = [];\n  var numToRun = 0;\n  var isProcessing = false;\n  var flushNextFrame = false;\n  var toKeepAlive = new WeakSet();\n  var step = {\n    schedule: function schedule(callback) {\n      var keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var addToCurrentFrame = immediate && isProcessing;\n      var buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n      if (keepAlive) toKeepAlive.add(callback);\n\n      if (buffer.indexOf(callback) === -1) {\n        buffer.push(callback);\n        if (addToCurrentFrame && isProcessing) numToRun = toRun.length;\n      }\n\n      return callback;\n    },\n    cancel: function cancel(callback) {\n      var index = toRunNextFrame.indexOf(callback);\n      if (index !== -1) toRunNextFrame.splice(index, 1);\n      toKeepAlive.delete(callback);\n    },\n    process: function process(frameData) {\n      if (isProcessing) {\n        flushNextFrame = true;\n        return;\n      }\n\n      isProcessing = true;\n      var _ref = [toRunNextFrame, toRun];\n      toRun = _ref[0];\n      toRunNextFrame = _ref[1];\n      toRunNextFrame.length = 0;\n      numToRun = toRun.length;\n\n      if (numToRun) {\n        for (var i = 0; i < numToRun; i++) {\n          var callback = toRun[i];\n          callback(frameData);\n\n          if (toKeepAlive.has(callback)) {\n            step.schedule(callback);\n            runNextFrame();\n          }\n        }\n      }\n\n      isProcessing = false;\n\n      if (flushNextFrame) {\n        flushNextFrame = false;\n        step.process(frameData);\n      }\n    }\n  };\n  return step;\n}\n\nexport { createRenderStep };","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/personal-website/node_modules/framesync/dist/es/create-render-step.mjs"],"names":["createRenderStep","runNextFrame","toRun","toRunNextFrame","numToRun","isProcessing","flushNextFrame","toKeepAlive","WeakSet","step","schedule","callback","keepAlive","immediate","addToCurrentFrame","buffer","add","indexOf","push","length","cancel","index","splice","delete","process","frameData","i","has"],"mappings":"AAAA,SAASA,gBAAT,CAA0BC,YAA1B,EAAwC;AACpC,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,QAAQ,GAAG,CAAf;AACA,MAAIC,YAAY,GAAG,KAAnB;AACA,MAAIC,cAAc,GAAG,KAArB;AACA,MAAMC,WAAW,GAAG,IAAIC,OAAJ,EAApB;AACA,MAAMC,IAAI,GAAG;AACTC,IAAAA,QAAQ,EAAE,kBAACC,QAAD,EAAoD;AAAA,UAAzCC,SAAyC,uEAA7B,KAA6B;AAAA,UAAtBC,SAAsB,uEAAV,KAAU;AAC1D,UAAMC,iBAAiB,GAAGD,SAAS,IAAIR,YAAvC;AACA,UAAMU,MAAM,GAAGD,iBAAiB,GAAGZ,KAAH,GAAWC,cAA3C;AACA,UAAIS,SAAJ,EACIL,WAAW,CAACS,GAAZ,CAAgBL,QAAhB;;AACJ,UAAII,MAAM,CAACE,OAAP,CAAeN,QAAf,MAA6B,CAAC,CAAlC,EAAqC;AACjCI,QAAAA,MAAM,CAACG,IAAP,CAAYP,QAAZ;AACA,YAAIG,iBAAiB,IAAIT,YAAzB,EACID,QAAQ,GAAGF,KAAK,CAACiB,MAAjB;AACP;;AACD,aAAOR,QAAP;AACH,KAZQ;AAaTS,IAAAA,MAAM,EAAE,gBAACT,QAAD,EAAc;AAClB,UAAMU,KAAK,GAAGlB,cAAc,CAACc,OAAf,CAAuBN,QAAvB,CAAd;AACA,UAAIU,KAAK,KAAK,CAAC,CAAf,EACIlB,cAAc,CAACmB,MAAf,CAAsBD,KAAtB,EAA6B,CAA7B;AACJd,MAAAA,WAAW,CAACgB,MAAZ,CAAmBZ,QAAnB;AACH,KAlBQ;AAmBTa,IAAAA,OAAO,EAAE,iBAACC,SAAD,EAAe;AACpB,UAAIpB,YAAJ,EAAkB;AACdC,QAAAA,cAAc,GAAG,IAAjB;AACA;AACH;;AACDD,MAAAA,YAAY,GAAG,IAAf;AALoB,iBAMM,CAACF,cAAD,EAAiBD,KAAjB,CANN;AAMnBA,MAAAA,KANmB;AAMZC,MAAAA,cANY;AAOpBA,MAAAA,cAAc,CAACgB,MAAf,GAAwB,CAAxB;AACAf,MAAAA,QAAQ,GAAGF,KAAK,CAACiB,MAAjB;;AACA,UAAIf,QAAJ,EAAc;AACV,aAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,QAApB,EAA8BsB,CAAC,EAA/B,EAAmC;AAC/B,cAAMf,QAAQ,GAAGT,KAAK,CAACwB,CAAD,CAAtB;AACAf,UAAAA,QAAQ,CAACc,SAAD,CAAR;;AACA,cAAIlB,WAAW,CAACoB,GAAZ,CAAgBhB,QAAhB,CAAJ,EAA+B;AAC3BF,YAAAA,IAAI,CAACC,QAAL,CAAcC,QAAd;AACAV,YAAAA,YAAY;AACf;AACJ;AACJ;;AACDI,MAAAA,YAAY,GAAG,KAAf;;AACA,UAAIC,cAAJ,EAAoB;AAChBA,QAAAA,cAAc,GAAG,KAAjB;AACAG,QAAAA,IAAI,CAACe,OAAL,CAAaC,SAAb;AACH;AACJ;AA3CQ,GAAb;AA6CA,SAAOhB,IAAP;AACH;;AAED,SAAST,gBAAT","sourcesContent":["function createRenderStep(runNextFrame) {\n    let toRun = [];\n    let toRunNextFrame = [];\n    let numToRun = 0;\n    let isProcessing = false;\n    let flushNextFrame = false;\n    const toKeepAlive = new WeakSet();\n    const step = {\n        schedule: (callback, keepAlive = false, immediate = false) => {\n            const addToCurrentFrame = immediate && isProcessing;\n            const buffer = addToCurrentFrame ? toRun : toRunNextFrame;\n            if (keepAlive)\n                toKeepAlive.add(callback);\n            if (buffer.indexOf(callback) === -1) {\n                buffer.push(callback);\n                if (addToCurrentFrame && isProcessing)\n                    numToRun = toRun.length;\n            }\n            return callback;\n        },\n        cancel: (callback) => {\n            const index = toRunNextFrame.indexOf(callback);\n            if (index !== -1)\n                toRunNextFrame.splice(index, 1);\n            toKeepAlive.delete(callback);\n        },\n        process: (frameData) => {\n            if (isProcessing) {\n                flushNextFrame = true;\n                return;\n            }\n            isProcessing = true;\n            [toRun, toRunNextFrame] = [toRunNextFrame, toRun];\n            toRunNextFrame.length = 0;\n            numToRun = toRun.length;\n            if (numToRun) {\n                for (let i = 0; i < numToRun; i++) {\n                    const callback = toRun[i];\n                    callback(frameData);\n                    if (toKeepAlive.has(callback)) {\n                        step.schedule(callback);\n                        runNextFrame();\n                    }\n                }\n            }\n            isProcessing = false;\n            if (flushNextFrame) {\n                flushNextFrame = false;\n                step.process(frameData);\n            }\n        },\n    };\n    return step;\n}\n\nexport { createRenderStep };\n"]},"metadata":{},"sourceType":"module"}