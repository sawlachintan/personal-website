{"ast":null,"code":"import { __read, __spreadArray } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useRef, useEffect, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\n\nfunction getChildKey(child) {\n  return child.key || \"\";\n}\n\nfunction updateChildLookup(children, allChildren) {\n  var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n  children.forEach(function (child) {\n    var key = getChildKey(child);\n\n    if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n      if (seenChildren.has(key)) {\n        console.warn(\"Children of AnimatePresence require unique keys. \\\"\".concat(key, \"\\\" is a duplicate.\"));\n      }\n\n      seenChildren.add(key);\n    }\n\n    allChildren.set(key, child);\n  });\n}\n\nfunction onlyElements(children) {\n  var filtered = []; // We use forEach here instead of map as map mutates the component key by preprending `.$`\n\n  Children.forEach(children, function (child) {\n    if (isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\n\n\nvar AnimatePresence = function (_a) {\n  var children = _a.children,\n      custom = _a.custom,\n      _b = _a.initial,\n      initial = _b === void 0 ? true : _b,\n      onExitComplete = _a.onExitComplete,\n      exitBeforeEnter = _a.exitBeforeEnter,\n      _c = _a.presenceAffectsLayout,\n      presenceAffectsLayout = _c === void 0 ? true : _c; // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n\n  var _d = __read(useForceUpdate(), 1),\n      forceRender = _d[0];\n\n  var forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n  if (forceRenderLayoutGroup) forceRender = forceRenderLayoutGroup;\n  var isInitialRender = useRef(true);\n  var isMounted = useRef(true);\n  useEffect(function () {\n    return function () {\n      isMounted.current = false;\n    };\n  }, []); // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n\n  var filteredChildren = onlyElements(children); // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n\n  var presentChildren = useRef(filteredChildren); // A lookup table to quickly reference components by key\n\n  var allChildren = useRef(new Map()).current; // A living record of all currently exiting components.\n\n  var exiting = useRef(new Set()).current;\n  updateChildLookup(filteredChildren, allChildren); // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n\n  if (isInitialRender.current) {\n    isInitialRender.current = false;\n    return React.createElement(React.Fragment, null, filteredChildren.map(function (child) {\n      return React.createElement(PresenceChild, {\n        key: getChildKey(child),\n        isPresent: true,\n        initial: initial ? undefined : false,\n        presenceAffectsLayout: presenceAffectsLayout\n      }, child);\n    }));\n  } // If this is a subsequent render, deal with entering and exiting children\n\n\n  var childrenToRender = __spreadArray([], __read(filteredChildren), false); // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n\n\n  var presentKeys = presentChildren.current.map(getChildKey);\n  var targetKeys = filteredChildren.map(getChildKey); // Diff the present children with our target children and mark those that are exiting\n\n  var numPresent = presentKeys.length;\n\n  for (var i = 0; i < numPresent; i++) {\n    var key = presentKeys[i];\n\n    if (targetKeys.indexOf(key) === -1) {\n      exiting.add(key);\n    } else {\n      // In case this key has re-entered, remove from the exiting list\n      exiting.delete(key);\n    }\n  } // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n\n\n  if (exitBeforeEnter && exiting.size) {\n    childrenToRender = [];\n  } // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n\n\n  exiting.forEach(function (key) {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    var child = allChildren.get(key);\n    if (!child) return;\n    var insertionIndex = presentKeys.indexOf(key);\n\n    var onExit = function () {\n      allChildren.delete(key);\n      exiting.delete(key); // Remove this child from the present children\n\n      var removeIndex = presentChildren.current.findIndex(function (presentChild) {\n        return presentChild.key === key;\n      });\n      presentChildren.current.splice(removeIndex, 1); // Defer re-rendering until all exiting children have indeed left\n\n      if (!exiting.size) {\n        presentChildren.current = filteredChildren;\n\n        if (isMounted.current === false) {\n          return;\n        }\n\n        forceRender();\n        onExitComplete && onExitComplete();\n      }\n    };\n\n    childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: false,\n      onExitComplete: onExit,\n      custom: custom,\n      presenceAffectsLayout: presenceAffectsLayout\n    }, child));\n  }); // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n\n  childrenToRender = childrenToRender.map(function (child) {\n    var key = child.key;\n    return exiting.has(key) ? child : React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout\n    }, child);\n  });\n  presentChildren.current = childrenToRender;\n\n  if (process.env.NODE_ENV !== \"production\" && exitBeforeEnter && childrenToRender.length > 1) {\n    console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n  }\n\n  return React.createElement(React.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function (child) {\n    return cloneElement(child);\n  }));\n};\n\nexport { AnimatePresence };","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/personal-website/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"names":["__read","__spreadArray","React","useContext","useRef","useEffect","cloneElement","Children","isValidElement","useForceUpdate","PresenceChild","LayoutGroupContext","getChildKey","child","key","updateChildLookup","children","allChildren","seenChildren","process","env","NODE_ENV","Set","forEach","has","console","warn","concat","add","set","onlyElements","filtered","push","AnimatePresence","_a","custom","_b","initial","onExitComplete","exitBeforeEnter","_c","presenceAffectsLayout","_d","forceRender","forceRenderLayoutGroup","isInitialRender","isMounted","current","filteredChildren","presentChildren","Map","exiting","createElement","Fragment","map","isPresent","undefined","childrenToRender","presentKeys","targetKeys","numPresent","length","i","indexOf","delete","size","get","insertionIndex","onExit","removeIndex","findIndex","presentChild","splice"],"mappings":"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","sourcesContent":["import { __read, __spreadArray } from 'tslib';\nimport * as React from 'react';\nimport { useContext, useRef, useEffect, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\n\nfunction getChildKey(child) {\n    return child.key || \"\";\n}\nfunction updateChildLookup(children, allChildren) {\n    var seenChildren = process.env.NODE_ENV !== \"production\" ? new Set() : null;\n    children.forEach(function (child) {\n        var key = getChildKey(child);\n        if (process.env.NODE_ENV !== \"production\" && seenChildren) {\n            if (seenChildren.has(key)) {\n                console.warn(\"Children of AnimatePresence require unique keys. \\\"\".concat(key, \"\\\" is a duplicate.\"));\n            }\n            seenChildren.add(key);\n        }\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    var filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, function (child) {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nvar AnimatePresence = function (_a) {\n    var children = _a.children, custom = _a.custom, _b = _a.initial, initial = _b === void 0 ? true : _b, onExitComplete = _a.onExitComplete, exitBeforeEnter = _a.exitBeforeEnter, _c = _a.presenceAffectsLayout, presenceAffectsLayout = _c === void 0 ? true : _c;\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    var _d = __read(useForceUpdate(), 1), forceRender = _d[0];\n    var forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    var isInitialRender = useRef(true);\n    var isMounted = useRef(true);\n    useEffect(function () { return function () {\n        isMounted.current = false;\n    }; }, []);\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    var filteredChildren = onlyElements(children);\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    var presentChildren = useRef(filteredChildren);\n    // A lookup table to quickly reference components by key\n    var allChildren = useRef(new Map()).current;\n    // A living record of all currently exiting components.\n    var exiting = useRef(new Set()).current;\n    updateChildLookup(filteredChildren, allChildren);\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    if (isInitialRender.current) {\n        isInitialRender.current = false;\n        return (React.createElement(React.Fragment, null, filteredChildren.map(function (child) { return (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout }, child)); })));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    var childrenToRender = __spreadArray([], __read(filteredChildren), false);\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    var presentKeys = presentChildren.current.map(getChildKey);\n    var targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    var numPresent = presentKeys.length;\n    for (var i = 0; i < numPresent; i++) {\n        var key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n        else {\n            // In case this key has re-entered, remove from the exiting list\n            exiting.delete(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (exitBeforeEnter && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach(function (key) {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        var child = allChildren.get(key);\n        if (!child)\n            return;\n        var insertionIndex = presentKeys.indexOf(key);\n        var onExit = function () {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            var removeIndex = presentChildren.current.findIndex(function (presentChild) { return presentChild.key === key; });\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false) {\n                    return;\n                }\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map(function (child) {\n        var key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout }, child));\n    });\n    presentChildren.current = childrenToRender;\n    if (process.env.NODE_ENV !== \"production\" &&\n        exitBeforeEnter &&\n        childrenToRender.length > 1) {\n        console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This will lead to odd visual behaviour.\");\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map(function (child) { return cloneElement(child); })));\n};\n\nexport { AnimatePresence };\n"]},"metadata":{},"sourceType":"module"}