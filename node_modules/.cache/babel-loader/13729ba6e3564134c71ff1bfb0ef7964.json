{"ast":null,"code":"import _toConsumableArray from \"/Users/chintansawla/Documents/GitHub/personal-website/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/chintansawla/Documents/GitHub/personal-website/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/chintansawla/Documents/GitHub/personal-website/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport pointRadial from \"../pointRadial.js\";\n\nvar Bump = /*#__PURE__*/function () {\n  function Bump(context, x) {\n    _classCallCheck(this, Bump);\n\n    this._context = context;\n    this._x = x;\n  }\n\n  _createClass(Bump, [{\n    key: \"areaStart\",\n    value: function areaStart() {\n      this._line = 0;\n    }\n  }, {\n    key: \"areaEnd\",\n    value: function areaEnd() {\n      this._line = NaN;\n    }\n  }, {\n    key: \"lineStart\",\n    value: function lineStart() {\n      this._point = 0;\n    }\n  }, {\n    key: \"lineEnd\",\n    value: function lineEnd() {\n      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n      this._line = 1 - this._line;\n    }\n  }, {\n    key: \"point\",\n    value: function point(x, y) {\n      x = +x, y = +y;\n\n      switch (this._point) {\n        case 0:\n          {\n            this._point = 1;\n            if (this._line) this._context.lineTo(x, y);else this._context.moveTo(x, y);\n            break;\n          }\n\n        case 1:\n          this._point = 2;\n        // falls through\n\n        default:\n          {\n            if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);\n            break;\n          }\n      }\n\n      this._x0 = x, this._y0 = y;\n    }\n  }]);\n\n  return Bump;\n}();\n\nvar BumpRadial = /*#__PURE__*/function () {\n  function BumpRadial(context) {\n    _classCallCheck(this, BumpRadial);\n\n    this._context = context;\n  }\n\n  _createClass(BumpRadial, [{\n    key: \"lineStart\",\n    value: function lineStart() {\n      this._point = 0;\n    }\n  }, {\n    key: \"lineEnd\",\n    value: function lineEnd() {}\n  }, {\n    key: \"point\",\n    value: function point(x, y) {\n      x = +x, y = +y;\n\n      if (this._point++ === 0) {\n        this._x0 = x, this._y0 = y;\n      } else {\n        var _this$_context, _this$_context2;\n\n        var p0 = pointRadial(this._x0, this._y0);\n        var p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);\n        var p2 = pointRadial(x, this._y0);\n        var p3 = pointRadial(x, y);\n\n        (_this$_context = this._context).moveTo.apply(_this$_context, _toConsumableArray(p0));\n\n        (_this$_context2 = this._context).bezierCurveTo.apply(_this$_context2, _toConsumableArray(p1).concat(_toConsumableArray(p2), _toConsumableArray(p3)));\n      }\n    }\n  }]);\n\n  return BumpRadial;\n}();\n\nexport function bumpX(context) {\n  return new Bump(context, true);\n}\nexport function bumpY(context) {\n  return new Bump(context, false);\n}\nexport function bumpRadial(context) {\n  return new BumpRadial(context);\n}","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/personal-website/node_modules/d3-shape/src/curve/bump.js"],"names":["pointRadial","Bump","context","x","_context","_x","_line","NaN","_point","closePath","y","lineTo","moveTo","bezierCurveTo","_x0","_y0","BumpRadial","p0","p1","p2","p3","bumpX","bumpY","bumpRadial"],"mappings":"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","sourcesContent":["import pointRadial from \"../pointRadial.js\";\n\nclass Bump {\n  constructor(context, x) {\n    this._context = context;\n    this._x = x;\n  }\n  areaStart() {\n    this._line = 0;\n  }\n  areaEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n  point(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: {\n        this._point = 1;\n        if (this._line) this._context.lineTo(x, y);\n        else this._context.moveTo(x, y);\n        break;\n      }\n      case 1: this._point = 2; // falls through\n      default: {\n        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);\n        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);\n        break;\n      }\n    }\n    this._x0 = x, this._y0 = y;\n  }\n}\n\nclass BumpRadial {\n  constructor(context) {\n    this._context = context;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {}\n  point(x, y) {\n    x = +x, y = +y;\n    if (this._point++ === 0) {\n      this._x0 = x, this._y0 = y;\n    } else {\n      const p0 = pointRadial(this._x0, this._y0);\n      const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);\n      const p2 = pointRadial(x, this._y0);\n      const p3 = pointRadial(x, y);\n      this._context.moveTo(...p0);\n      this._context.bezierCurveTo(...p1, ...p2, ...p3);\n    }\n  }\n}\n\nexport function bumpX(context) {\n  return new Bump(context, true);\n}\n\nexport function bumpY(context) {\n  return new Bump(context, false);\n}\n\nexport function bumpRadial(context) {\n  return new BumpRadial(context);\n}\n"]},"metadata":{},"sourceType":"module"}