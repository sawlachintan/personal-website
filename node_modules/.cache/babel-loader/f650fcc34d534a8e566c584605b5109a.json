{"ast":null,"code":"import pointRadial from \"../pointRadial.js\";\n\nclass Bump {\n  constructor(context, x) {\n    this._context = context;\n    this._x = x;\n  }\n\n  areaStart() {\n    this._line = 0;\n  }\n\n  areaEnd() {\n    this._line = NaN;\n  }\n\n  lineStart() {\n    this._point = 0;\n  }\n\n  lineEnd() {\n    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n\n  point(x, y) {\n    x = +x, y = +y;\n\n    switch (this._point) {\n      case 0:\n        {\n          this._point = 1;\n          if (this._line) this._context.lineTo(x, y);else this._context.moveTo(x, y);\n          break;\n        }\n\n      case 1:\n        this._point = 2;\n      // falls through\n\n      default:\n        {\n          if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);\n          break;\n        }\n    }\n\n    this._x0 = x, this._y0 = y;\n  }\n\n}\n\nclass BumpRadial {\n  constructor(context) {\n    this._context = context;\n  }\n\n  lineStart() {\n    this._point = 0;\n  }\n\n  lineEnd() {}\n\n  point(x, y) {\n    x = +x, y = +y;\n\n    if (this._point++ === 0) {\n      this._x0 = x, this._y0 = y;\n    } else {\n      const p0 = pointRadial(this._x0, this._y0);\n      const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);\n      const p2 = pointRadial(x, this._y0);\n      const p3 = pointRadial(x, y);\n\n      this._context.moveTo(...p0);\n\n      this._context.bezierCurveTo(...p1, ...p2, ...p3);\n    }\n  }\n\n}\n\nexport function bumpX(context) {\n  return new Bump(context, true);\n}\nexport function bumpY(context) {\n  return new Bump(context, false);\n}\nexport function bumpRadial(context) {\n  return new BumpRadial(context);\n}","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/personal-website/node_modules/d3-shape/src/curve/bump.js"],"names":["pointRadial","Bump","constructor","context","x","_context","_x","areaStart","_line","areaEnd","NaN","lineStart","_point","lineEnd","closePath","point","y","lineTo","moveTo","bezierCurveTo","_x0","_y0","BumpRadial","p0","p1","p2","p3","bumpX","bumpY","bumpRadial"],"mappings":"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","sourcesContent":["import pointRadial from \"../pointRadial.js\";\n\nclass Bump {\n  constructor(context, x) {\n    this._context = context;\n    this._x = x;\n  }\n  areaStart() {\n    this._line = 0;\n  }\n  areaEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  }\n  point(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: {\n        this._point = 1;\n        if (this._line) this._context.lineTo(x, y);\n        else this._context.moveTo(x, y);\n        break;\n      }\n      case 1: this._point = 2; // falls through\n      default: {\n        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);\n        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);\n        break;\n      }\n    }\n    this._x0 = x, this._y0 = y;\n  }\n}\n\nclass BumpRadial {\n  constructor(context) {\n    this._context = context;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {}\n  point(x, y) {\n    x = +x, y = +y;\n    if (this._point++ === 0) {\n      this._x0 = x, this._y0 = y;\n    } else {\n      const p0 = pointRadial(this._x0, this._y0);\n      const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);\n      const p2 = pointRadial(x, this._y0);\n      const p3 = pointRadial(x, y);\n      this._context.moveTo(...p0);\n      this._context.bezierCurveTo(...p1, ...p2, ...p3);\n    }\n  }\n}\n\nexport function bumpX(context) {\n  return new Bump(context, true);\n}\n\nexport function bumpY(context) {\n  return new Bump(context, false);\n}\n\nexport function bumpRadial(context) {\n  return new BumpRadial(context);\n}\n"]},"metadata":{},"sourceType":"module"}