{"ast":null,"code":"import { onNextFrame, defaultTimestep } from './on-next-frame.mjs';\nimport { createRenderStep } from './create-render-step.mjs';\nvar maxElapsed = 40;\nvar useDefaultElapsed = true;\nvar runNextFrame = false;\nvar isProcessing = false;\nvar frame = {\n  delta: 0,\n  timestamp: 0\n};\nvar stepsOrder = [\"read\", \"update\", \"preRender\", \"render\", \"postRender\"];\nvar steps = stepsOrder.reduce(function (acc, key) {\n  acc[key] = createRenderStep(function () {\n    return runNextFrame = true;\n  });\n  return acc;\n}, {});\nvar sync = stepsOrder.reduce(function (acc, key) {\n  var step = steps[key];\n\n  acc[key] = function (process) {\n    var keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!runNextFrame) startLoop();\n    return step.schedule(process, keepAlive, immediate);\n  };\n\n  return acc;\n}, {});\nvar cancelSync = stepsOrder.reduce(function (acc, key) {\n  acc[key] = steps[key].cancel;\n  return acc;\n}, {});\nvar flushSync = stepsOrder.reduce(function (acc, key) {\n  acc[key] = function () {\n    return steps[key].process(frame);\n  };\n\n  return acc;\n}, {});\n\nvar processStep = function processStep(stepId) {\n  return steps[stepId].process(frame);\n};\n\nvar processFrame = function processFrame(timestamp) {\n  runNextFrame = false;\n  frame.delta = useDefaultElapsed ? defaultTimestep : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);\n  frame.timestamp = timestamp;\n  isProcessing = true;\n  stepsOrder.forEach(processStep);\n  isProcessing = false;\n\n  if (runNextFrame) {\n    useDefaultElapsed = false;\n    onNextFrame(processFrame);\n  }\n};\n\nvar startLoop = function startLoop() {\n  runNextFrame = true;\n  useDefaultElapsed = true;\n  if (!isProcessing) onNextFrame(processFrame);\n};\n\nvar getFrameData = function getFrameData() {\n  return frame;\n};\n\nexport default sync;\nexport { cancelSync, flushSync, getFrameData };","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/personal-website/node_modules/framesync/dist/es/index.mjs"],"names":["onNextFrame","defaultTimestep","createRenderStep","maxElapsed","useDefaultElapsed","runNextFrame","isProcessing","frame","delta","timestamp","stepsOrder","steps","reduce","acc","key","sync","step","process","keepAlive","immediate","startLoop","schedule","cancelSync","cancel","flushSync","processStep","stepId","processFrame","Math","max","min","forEach","getFrameData"],"mappings":"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","sourcesContent":["import { onNextFrame, defaultTimestep } from './on-next-frame.mjs';\nimport { createRenderStep } from './create-render-step.mjs';\n\nconst maxElapsed = 40;\nlet useDefaultElapsed = true;\nlet runNextFrame = false;\nlet isProcessing = false;\nconst frame = {\n    delta: 0,\n    timestamp: 0,\n};\nconst stepsOrder = [\n    \"read\",\n    \"update\",\n    \"preRender\",\n    \"render\",\n    \"postRender\",\n];\nconst steps = stepsOrder.reduce((acc, key) => {\n    acc[key] = createRenderStep(() => (runNextFrame = true));\n    return acc;\n}, {});\nconst sync = stepsOrder.reduce((acc, key) => {\n    const step = steps[key];\n    acc[key] = (process, keepAlive = false, immediate = false) => {\n        if (!runNextFrame)\n            startLoop();\n        return step.schedule(process, keepAlive, immediate);\n    };\n    return acc;\n}, {});\nconst cancelSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = steps[key].cancel;\n    return acc;\n}, {});\nconst flushSync = stepsOrder.reduce((acc, key) => {\n    acc[key] = () => steps[key].process(frame);\n    return acc;\n}, {});\nconst processStep = (stepId) => steps[stepId].process(frame);\nconst processFrame = (timestamp) => {\n    runNextFrame = false;\n    frame.delta = useDefaultElapsed\n        ? defaultTimestep\n        : Math.max(Math.min(timestamp - frame.timestamp, maxElapsed), 1);\n    frame.timestamp = timestamp;\n    isProcessing = true;\n    stepsOrder.forEach(processStep);\n    isProcessing = false;\n    if (runNextFrame) {\n        useDefaultElapsed = false;\n        onNextFrame(processFrame);\n    }\n};\nconst startLoop = () => {\n    runNextFrame = true;\n    useDefaultElapsed = true;\n    if (!isProcessing)\n        onNextFrame(processFrame);\n};\nconst getFrameData = () => frame;\n\nexport default sync;\nexport { cancelSync, flushSync, getFrameData };\n"]},"metadata":{},"sourceType":"module"}