{"ast":null,"code":"import _slicedToArray from \"/Users/chintansawla/Documents/GitHub/personal-website/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nexport default function useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _getThemeProps = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme: theme\n  }),\n      _getThemeProps$defaul = _getThemeProps.defaultMatches,\n      defaultMatches = _getThemeProps$defaul === void 0 ? false : _getThemeProps$defaul,\n      _getThemeProps$matchM = _getThemeProps.matchMedia,\n      matchMedia = _getThemeProps$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _getThemeProps$matchM,\n      _getThemeProps$noSsr = _getThemeProps.noSsr,\n      noSsr = _getThemeProps$noSsr === void 0 ? false : _getThemeProps$noSsr,\n      _getThemeProps$ssrMat = _getThemeProps.ssrMatchMedia,\n      ssrMatchMedia = _getThemeProps$ssrMat === void 0 ? null : _getThemeProps$ssrMat;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n    return defaultMatches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      match = _React$useState2[0],\n      setMatch = _React$useState2[1];\n\n  useEnhancedEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query: query,\n      match: match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/personal-website/node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"names":["React","getThemeProps","useThemeWithoutDefault","useTheme","useEnhancedEffect","useMediaQuery","queryInput","options","theme","supportMatchMedia","window","matchMedia","name","props","defaultMatches","noSsr","ssrMatchMedia","process","env","NODE_ENV","console","error","join","query","replace","useState","matches","match","setMatch","active","undefined","queryList","updateMatch","addListener","removeListener","useDebugValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, '');\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"]},"metadata":{},"sourceType":"module"}