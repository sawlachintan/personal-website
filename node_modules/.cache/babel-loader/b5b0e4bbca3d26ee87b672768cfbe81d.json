{"ast":null,"code":"import _slicedToArray from \"/Users/chintansawla/Documents/GitHub/personal-website/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nvar _excluded = [\"colorSchemes\"],\n    _excluded2 = [\"colorSchemes\"],\n    _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  var _options$theme = options.theme,\n      baseTheme = _options$theme === void 0 ? {} : _options$theme,\n      _options$defaultMode = options.defaultMode,\n      desisgnSystemMode = _options$defaultMode === void 0 ? 'light' : _options$defaultMode,\n      designSystemColorScheme = options.defaultColorScheme,\n      _options$disableTrans = options.disableTransitionOnChange,\n      disableTransitionOnChange = _options$disableTrans === void 0 ? false : _options$disableTrans,\n      _options$enableColorS = options.enableColorScheme,\n      enableColorScheme = _options$enableColorS === void 0 ? true : _options$enableColorS,\n      _options$prefix = options.prefix,\n      designSystemPrefix = _options$prefix === void 0 ? '' : _options$prefix,\n      shouldSkipGeneratingVar = options.shouldSkipGeneratingVar;\n  var systemSpacing = createSpacing(baseTheme.spacing);\n  var systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(\"MUI: `\".concat(designSystemColorScheme, \"` does not exist in `theme.colorSchemes`.\"));\n  }\n\n  var ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  var useColorScheme = function useColorScheme() {\n    var value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? \"MUI: `useColorScheme` must be called under <CssVarsProvider />\" : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider(_ref) {\n    var children = _ref.children,\n        _ref$theme = _ref.theme,\n        themeProp = _ref$theme === void 0 ? {} : _ref$theme,\n        _ref$prefix = _ref.prefix,\n        prefix = _ref$prefix === void 0 ? designSystemPrefix : _ref$prefix,\n        _ref$modeStorageKey = _ref.modeStorageKey,\n        modeStorageKey = _ref$modeStorageKey === void 0 ? DEFAULT_MODE_STORAGE_KEY : _ref$modeStorageKey,\n        _ref$attribute = _ref.attribute,\n        attribute = _ref$attribute === void 0 ? DEFAULT_ATTRIBUTE : _ref$attribute,\n        _ref$defaultMode = _ref.defaultMode,\n        defaultMode = _ref$defaultMode === void 0 ? desisgnSystemMode : _ref$defaultMode,\n        _ref$defaultColorSche = _ref.defaultColorScheme,\n        defaultColorScheme = _ref$defaultColorSche === void 0 ? designSystemColorScheme : _ref$defaultColorSche;\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    var clonedBaseTheme = React.useMemo(function () {\n      return JSON.parse(JSON.stringify(baseTheme));\n    }, []);\n\n    var _clonedBaseTheme$colo = clonedBaseTheme.colorSchemes,\n        baseColorSchemes = _clonedBaseTheme$colo === void 0 ? {} : _clonedBaseTheme$colo,\n        restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    var _themeProp$colorSchem = themeProp.colorSchemes,\n        colorSchemesProp = _themeProp$colorSchem === void 0 ? {} : _themeProp$colorSchem,\n        restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    var hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    var _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        _deepmerge$components = _deepmerge.components,\n        components = _deepmerge$components === void 0 ? {} : _deepmerge$components,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    var colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    var allColorSchemes = Object.keys(colorSchemes);\n    var defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    var defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    var _useCurrentColorSchem = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme: defaultLightColorScheme,\n      defaultDarkColorScheme: defaultDarkColorScheme,\n      modeStorageKey: modeStorageKey,\n      defaultMode: defaultMode\n    }),\n        mode = _useCurrentColorSchem.mode,\n        setMode = _useCurrentColorSchem.setMode,\n        systemMode = _useCurrentColorSchem.systemMode,\n        lightColorScheme = _useCurrentColorSchem.lightColorScheme,\n        darkColorScheme = _useCurrentColorSchem.darkColorScheme,\n        colorScheme = _useCurrentColorSchem.colorScheme,\n        setColorScheme = _useCurrentColorSchem.setColorScheme;\n\n    var resolvedColorScheme = function () {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    }();\n\n    var _cssVarsParser = cssVarsParser(mergedTheme, {\n      prefix: prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar: shouldSkipGeneratingVar\n    }),\n        rootCss = _cssVarsParser.css,\n        rootVars = _cssVarsParser.vars;\n\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components: components,\n      colorSchemes: colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    var styleSheet = {};\n    Object.entries(colorSchemes).forEach(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          scheme = _ref3[1];\n\n      var _cssVarsParser2 = cssVarsParser(scheme, {\n        prefix: prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar: shouldSkipGeneratingVar\n      }),\n          css = _cssVarsParser2.css,\n          vars = _cssVarsParser2.vars;\n\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      var resolvedDefaultColorScheme = function () {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      }();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[\"[\".concat(attribute, \"=\\\"\").concat(key, \"\\\"]\")] = css;\n      }\n    });\n    React.useEffect(function () {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(function () {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      var priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return function () {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(function () {\n      var timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        var css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (function () {\n          return window.getComputedStyle(document.body);\n        })();\n\n        timer = setTimeout(function () {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return function () {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(function () {\n      hasMounted.current = true;\n      return function () {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode: mode,\n        setMode: setMode,\n        lightColorScheme: lightColorScheme,\n        darkColorScheme: darkColorScheme,\n        colorScheme: colorScheme,\n        setColorScheme: setColorScheme,\n        allColorSchemes: allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider: CssVarsProvider,\n    useColorScheme: useColorScheme,\n    getInitColorSchemeScript: getInitColorSchemeScript\n  };\n}","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/personal-website/node_modules/@mui/system/esm/cssVars/createCssVarsProvider.js"],"names":["_extends","_objectWithoutPropertiesLoose","formatMuiErrorMessage","_formatMuiErrorMessage","_excluded","_excluded2","_excluded3","React","PropTypes","GlobalStyles","deepmerge","unstable_useEnhancedEffect","useEnhancedEffect","createSpacing","createBreakpoints","cssVarsParser","ThemeProvider","getInitColorSchemeScript","DEFAULT_ATTRIBUTE","DEFAULT_MODE_STORAGE_KEY","useCurrentColorScheme","createGetCssVar","jsx","_jsx","jsxs","_jsxs","DISABLE_CSS_TRANSITION","createCssVarsProvider","options","_baseTheme$breakpoint","theme","baseTheme","defaultMode","desisgnSystemMode","designSystemColorScheme","defaultColorScheme","disableTransitionOnChange","enableColorScheme","prefix","designSystemPrefix","shouldSkipGeneratingVar","systemSpacing","spacing","systemBreakpoints","breakpoints","colorSchemes","light","dark","console","error","ColorSchemeContext","createContext","undefined","useColorScheme","value","useContext","Error","process","env","NODE_ENV","CssVarsProvider","children","themeProp","modeStorageKey","attribute","clonedBaseTheme","useMemo","JSON","parse","stringify","baseColorSchemes","restBaseTheme","colorSchemesProp","restThemeProp","hasMounted","useRef","_deepmerge","components","mergedTheme","allColorSchemes","Object","keys","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","mode","setMode","systemMode","lightColorScheme","darkColorScheme","colorScheme","setColorScheme","resolvedColorScheme","basePrefix","rootCss","css","rootVars","vars","getCssVar","styleSheet","entries","forEach","key","scheme","resolvedDefaultColorScheme","useEffect","document","documentElement","setAttribute","priorColorScheme","style","getPropertyValue","setProperty","timer","current","createElement","appendChild","createTextNode","head","window","getComputedStyle","body","setTimeout","removeChild","clearTimeout","Provider","styles","propTypes","string","node","oneOfType","object"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,SAASC,qBAAqB,IAAIC,sBAAlC,QAAgE,YAAhE;AACA,IAAMC,SAAS,GAAG,CAAC,cAAD,CAAlB;AAAA,IACMC,UAAU,GAAG,CAAC,cAAD,CADnB;AAAA,IAEMC,UAAU,GAAG,CAAC,YAAD,CAFnB;AAGA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,SAAT,EAAoBC,0BAA0B,IAAIC,iBAAlD,QAA2E,YAA3E;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,wBAAP,IAAmCC,iBAAnC,EAAsDC,wBAAtD,QAAsF,4BAAtF;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,mBAA9B;AACA,OAAO,IAAMC,sBAAsB,GAAG,0JAA/B;AACP,eAAe,SAASC,qBAAT,CAA+BC,OAA/B,EAAwC;AACrD,MAAIC,qBAAJ;;AAEA,uBAQID,OARJ,CACEE,KADF;AAAA,MACSC,SADT,+BACqB,EADrB;AAAA,6BAQIH,OARJ,CAEEI,WAFF;AAAA,MAEeC,iBAFf,qCAEmC,OAFnC;AAAA,MAGsBC,uBAHtB,GAQIN,OARJ,CAGEO,kBAHF;AAAA,8BAQIP,OARJ,CAIEQ,yBAJF;AAAA,MAIEA,yBAJF,sCAI8B,KAJ9B;AAAA,8BAQIR,OARJ,CAKES,iBALF;AAAA,MAKEA,iBALF,sCAKsB,IALtB;AAAA,wBAQIT,OARJ,CAMEU,MANF;AAAA,MAMUC,kBANV,gCAM+B,EAN/B;AAAA,MAOEC,uBAPF,GAQIZ,OARJ,CAOEY,uBAPF;AASA,MAAMC,aAAa,GAAG5B,aAAa,CAACkB,SAAS,CAACW,OAAX,CAAnC;AACA,MAAMC,iBAAiB,GAAG7B,iBAAiB,CAAC,CAACe,qBAAqB,GAAGE,SAAS,CAACa,WAAnC,KAAmD,IAAnD,GAA0Df,qBAA1D,GAAkF,EAAnF,CAA3C;;AAEA,MAAI,CAACE,SAAS,CAACc,YAAX,IAA2B,OAAOX,uBAAP,KAAmC,QAAnC,IAA+C,CAACH,SAAS,CAACc,YAAV,CAAuBX,uBAAvB,CAA3E,IAA8H,OAAOA,uBAAP,KAAmC,QAAnC,IAA+C,CAACH,SAAS,CAACc,YAAV,CAAuBX,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACY,KAA1F,CAA9K,IAAkR,OAAOZ,uBAAP,KAAmC,QAAnC,IAA+C,CAACH,SAAS,CAACc,YAAV,CAAuBX,uBAAuB,IAAI,IAA3B,GAAkC,KAAK,CAAvC,GAA2CA,uBAAuB,CAACa,IAA1F,CAAtU,EAAua;AACraC,IAAAA,OAAO,CAACC,KAAR,iBAAwBf,uBAAxB;AACD;;AAED,MAAMgB,kBAAkB,GAAG,aAAa3C,KAAK,CAAC4C,aAAN,CAAoBC,SAApB,CAAxC;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,QAAMC,KAAK,GAAG/C,KAAK,CAACgD,UAAN,CAAiBL,kBAAjB,CAAd;;AAEA,QAAI,CAACI,KAAL,EAAY;AACV,YAAM,IAAIE,KAAJ,CAAUC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,sEAA6GxD,sBAAsB,CAAC,EAAD,CAA7I,CAAN;AACD;;AAED,WAAOmD,KAAP;AACD,GARD;;AAUA,WAASM,eAAT,OAQG;AAAA,QAPDC,QAOC,QAPDA,QAOC;AAAA,0BAND/B,KAMC;AAAA,QANMgC,SAMN,2BANkB,EAMlB;AAAA,2BALDxB,MAKC;AAAA,QALDA,MAKC,4BALQC,kBAKR;AAAA,mCAJDwB,cAIC;AAAA,QAJDA,cAIC,oCAJgB5C,wBAIhB;AAAA,8BAHD6C,SAGC;AAAA,QAHDA,SAGC,+BAHW9C,iBAGX;AAAA,gCAFDc,WAEC;AAAA,QAFDA,WAEC,iCAFaC,iBAEb;AAAA,qCADDE,kBACC;AAAA,QADDA,kBACC,sCADoBD,uBACpB;AACD;AACA;AACA,QAAM+B,eAAe,GAAG1D,KAAK,CAAC2D,OAAN,CAAc;AAAA,aAAMC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetC,SAAf,CAAX,CAAN;AAAA,KAAd,EAA2D,EAA3D,CAAxB;;AAEA,gCAEIkC,eAFJ,CACEpB,YADF;AAAA,QACgByB,gBADhB,sCACmC,EADnC;AAAA,QAGMC,aAHN,GAGsBtE,6BAA6B,CAACgE,eAAD,EAAkB7D,SAAlB,CAHnD;;AAKA,gCAEI0D,SAFJ,CACEjB,YADF;AAAA,QACgB2B,gBADhB,sCACmC,EADnC;AAAA,QAGMC,aAHN,GAGsBxE,6BAA6B,CAAC6D,SAAD,EAAYzD,UAAZ,CAHnD;;AAKA,QAAMqE,UAAU,GAAGnE,KAAK,CAACoE,MAAN,CAAa,KAAb,CAAnB,CAfC,CAeuC;;AAEpC,QAAAC,UAAU,GAAGlE,SAAS,CAAC6D,aAAD,EAAgBE,aAAhB,CAAtB;AAAA,gCAGAG,UAHA,CAEFC,UAFE;AAAA,QAEFA,UAFE,sCAEW,EAFX;AAAA,QAIAC,WAJA,GAIc7E,6BAA6B,CAAC2E,UAAD,EAAatE,UAAb,CAJ3C;;AAMJ,QAAMuC,YAAY,GAAGnC,SAAS,CAAC4D,gBAAD,EAAmBE,gBAAnB,CAA9B;AACA,QAAMO,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYpC,YAAZ,CAAxB;AACA,QAAMqC,uBAAuB,GAAG,OAAO/C,kBAAP,KAA8B,QAA9B,GAAyCA,kBAAzC,GAA8DA,kBAAkB,CAACW,KAAjH;AACA,QAAMqC,sBAAsB,GAAG,OAAOhD,kBAAP,KAA8B,QAA9B,GAAyCA,kBAAzC,GAA8DA,kBAAkB,CAACY,IAAhH;;AACA,gCAQI3B,qBAAqB,CAAC;AACxBgE,MAAAA,qBAAqB,EAAEL,eADC;AAExBG,MAAAA,uBAAuB,EAAvBA,uBAFwB;AAGxBC,MAAAA,sBAAsB,EAAtBA,sBAHwB;AAIxBpB,MAAAA,cAAc,EAAdA,cAJwB;AAKxB/B,MAAAA,WAAW,EAAXA;AALwB,KAAD,CARzB;AAAA,QACEqD,IADF,yBACEA,IADF;AAAA,QAEEC,OAFF,yBAEEA,OAFF;AAAA,QAGEC,UAHF,yBAGEA,UAHF;AAAA,QAIEC,gBAJF,yBAIEA,gBAJF;AAAA,QAKEC,eALF,yBAKEA,eALF;AAAA,QAMEC,WANF,yBAMEA,WANF;AAAA,QAOEC,cAPF,yBAOEA,cAPF;;AAgBA,QAAMC,mBAAmB,GAAI,YAAM;AACjC,UAAI,CAACF,WAAL,EAAkB;AAChB;AACA,YAAI1D,WAAW,KAAK,MAApB,EAA4B;AAC1B,iBAAOmD,sBAAP;AACD,SAJe,CAId;;;AAGF,eAAOD,uBAAP;AACD;;AAED,aAAOQ,WAAP;AACD,KAZ2B,EAA5B;;AAcA,yBAGI3E,aAAa,CAAC+D,WAAD,EAAc;AAC7BxC,MAAAA,MAAM,EAANA,MAD6B;AAE7BuD,MAAAA,UAAU,EAAEtD,kBAFiB;AAG7BC,MAAAA,uBAAuB,EAAvBA;AAH6B,KAAd,CAHjB;AAAA,QACOsD,OADP,kBACEC,GADF;AAAA,QAEQC,QAFR,kBAEEC,IAFF;;AAQAnB,IAAAA,WAAW,GAAG9E,QAAQ,CAAC,EAAD,EAAK8E,WAAL,EAAkBjC,YAAY,CAAC+C,mBAAD,CAA9B,EAAqD;AACzEf,MAAAA,UAAU,EAAVA,UADyE;AAEzEhC,MAAAA,YAAY,EAAZA,YAFyE;AAGzEoD,MAAAA,IAAI,EAAED,QAHmE;AAIzEtD,MAAAA,OAAO,EAAEoB,SAAS,CAACpB,OAAV,GAAoB7B,aAAa,CAACiD,SAAS,CAACpB,OAAX,CAAjC,GAAuDD,aAJS;AAKzEG,MAAAA,WAAW,EAAEkB,SAAS,CAAClB,WAAV,GAAwB9B,iBAAiB,CAACgD,SAAS,CAAClB,WAAX,CAAzC,GAAmED,iBALP;AAMzEuD,MAAAA,SAAS,EAAE7E,eAAe,CAACiB,MAAD;AAN+C,KAArD,CAAtB;AAQA,QAAM6D,UAAU,GAAG,EAAnB;AACAnB,IAAAA,MAAM,CAACoB,OAAP,CAAevD,YAAf,EAA6BwD,OAA7B,CAAqC,iBAAmB;AAAA;AAAA,UAAjBC,GAAiB;AAAA,UAAZC,MAAY;;AACtD,4BAGIxF,aAAa,CAACwF,MAAD,EAAS;AACxBjE,QAAAA,MAAM,EAANA,MADwB;AAExBuD,QAAAA,UAAU,EAAEtD,kBAFY;AAGxBC,QAAAA,uBAAuB,EAAvBA;AAHwB,OAAT,CAHjB;AAAA,UACEuD,GADF,mBACEA,GADF;AAAA,UAEEE,IAFF,mBAEEA,IAFF;;AAQAnB,MAAAA,WAAW,CAACmB,IAAZ,GAAmBvF,SAAS,CAACoE,WAAW,CAACmB,IAAb,EAAmBA,IAAnB,CAA5B;;AAEA,UAAMO,0BAA0B,GAAI,YAAM;AACxC,YAAI,OAAOrE,kBAAP,KAA8B,QAAlC,EAA4C;AAC1C,iBAAOA,kBAAP;AACD;;AAED,YAAIH,WAAW,KAAK,MAApB,EAA4B;AAC1B,iBAAOG,kBAAkB,CAACY,IAA1B;AACD;;AAED,eAAOZ,kBAAkB,CAACW,KAA1B;AACD,OAVkC,EAAnC;;AAYA,UAAIwD,GAAG,KAAKE,0BAAZ,EAAwC;AACtCL,QAAAA,UAAU,CAAC,OAAD,CAAV,GAAsBJ,GAAtB;AACD,OAFD,MAEO;AACLI,QAAAA,UAAU,YAAKnC,SAAL,gBAAmBsC,GAAnB,SAAV,GAAwCP,GAAxC;AACD;AACF,KA5BD;AA6BAxF,IAAAA,KAAK,CAACkG,SAAN,CAAgB,YAAM;AACpB,UAAIf,WAAJ,EAAiB;AACf;AACAgB,QAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,CAAsC5C,SAAtC,EAAiD0B,WAAjD;AACD;AACF,KALD,EAKG,CAACA,WAAD,EAAc1B,SAAd,CALH;AAMApD,IAAAA,iBAAiB,CAAC,YAAM;AACtB,UAAI,CAACyE,IAAD,IAAS,CAAChD,iBAAd,EAAiC;AAC/B,eAAOe,SAAP;AACD;;AAED,UAAMyD,gBAAgB,GAAGH,QAAQ,CAACC,eAAT,CAAyBG,KAAzB,CAA+BC,gBAA/B,CAAgD,cAAhD,CAAzB,CALsB,CAKoE;;AAE1F,UAAI1B,IAAI,KAAK,QAAb,EAAuB;AACrBqB,QAAAA,QAAQ,CAACC,eAAT,CAAyBG,KAAzB,CAA+BE,WAA/B,CAA2C,cAA3C,EAA2DzB,UAA3D;AACD,OAFD,MAEO;AACLmB,QAAAA,QAAQ,CAACC,eAAT,CAAyBG,KAAzB,CAA+BE,WAA/B,CAA2C,cAA3C,EAA2D3B,IAA3D;AACD;;AAED,aAAO,YAAM;AACXqB,QAAAA,QAAQ,CAACC,eAAT,CAAyBG,KAAzB,CAA+BE,WAA/B,CAA2C,cAA3C,EAA2DH,gBAA3D;AACD,OAFD;AAGD,KAhBgB,EAgBd,CAACxB,IAAD,EAAOE,UAAP,CAhBc,CAAjB;AAiBAhF,IAAAA,KAAK,CAACkG,SAAN,CAAgB,YAAM;AACpB,UAAIQ,KAAJ;;AAEA,UAAI7E,yBAAyB,IAAIsC,UAAU,CAACwC,OAA5C,EAAqD;AACnD;AACA,YAAMnB,GAAG,GAAGW,QAAQ,CAACS,aAAT,CAAuB,OAAvB,CAAZ;AACApB,QAAAA,GAAG,CAACqB,WAAJ,CAAgBV,QAAQ,CAACW,cAAT,CAAwB3F,sBAAxB,CAAhB;AACAgF,QAAAA,QAAQ,CAACY,IAAT,CAAcF,WAAd,CAA0BrB,GAA1B,EAJmD,CAInB;;AAEhC,SAAC;AAAA,iBAAMwB,MAAM,CAACC,gBAAP,CAAwBd,QAAQ,CAACe,IAAjC,CAAN;AAAA,SAAD;;AAEAR,QAAAA,KAAK,GAAGS,UAAU,CAAC,YAAM;AACvBhB,UAAAA,QAAQ,CAACY,IAAT,CAAcK,WAAd,CAA0B5B,GAA1B;AACD,SAFiB,EAEf,CAFe,CAAlB;AAGD;;AAED,aAAO,YAAM;AACX6B,QAAAA,YAAY,CAACX,KAAD,CAAZ;AACD,OAFD;AAGD,KAnBD,EAmBG,CAACvB,WAAD,CAnBH;AAoBAnF,IAAAA,KAAK,CAACkG,SAAN,CAAgB,YAAM;AACpB/B,MAAAA,UAAU,CAACwC,OAAX,GAAqB,IAArB;AACA,aAAO,YAAM;AACXxC,QAAAA,UAAU,CAACwC,OAAX,GAAqB,KAArB;AACD,OAFD;AAGD,KALD,EAKG,EALH;AAMA,WAAO,aAAazF,KAAK,CAACyB,kBAAkB,CAAC2E,QAApB,EAA8B;AACrDvE,MAAAA,KAAK,EAAE;AACL+B,QAAAA,IAAI,EAAJA,IADK;AAELC,QAAAA,OAAO,EAAPA,OAFK;AAGLE,QAAAA,gBAAgB,EAAhBA,gBAHK;AAILC,QAAAA,eAAe,EAAfA,eAJK;AAKLC,QAAAA,WAAW,EAAXA,WALK;AAMLC,QAAAA,cAAc,EAAdA,cANK;AAOLZ,QAAAA,eAAe,EAAfA;AAPK,OAD8C;AAUrDlB,MAAAA,QAAQ,EAAE,CAAC,aAAatC,IAAI,CAACd,YAAD,EAAe;AACzCqH,QAAAA,MAAM,EAAE;AACN,mBAAShC;AADH;AADiC,OAAf,CAAlB,EAIN,aAAavE,IAAI,CAACd,YAAD,EAAe;AAClCqH,QAAAA,MAAM,EAAE3B;AAD0B,OAAf,CAJX,EAMN,aAAa5E,IAAI,CAACP,aAAD,EAAgB;AACnCc,QAAAA,KAAK,EAAEgD,WAD4B;AAEnCjB,QAAAA,QAAQ,EAAEA;AAFyB,OAAhB,CANX;AAV2C,KAA9B,CAAzB;AAqBD;;AAEDJ,EAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCC,eAAe,CAACmE,SAAhB,GAA4B;AAClE;AACJ;AACA;AACI/D,IAAAA,SAAS,EAAExD,SAAS,CAACwH,MAJ6C;;AAMlE;AACJ;AACA;AACInE,IAAAA,QAAQ,EAAErD,SAAS,CAACyH,IAT8C;;AAWlE;AACJ;AACA;AACI9F,IAAAA,kBAAkB,EAAE3B,SAAS,CAAC0H,SAAV,CAAoB,CAAC1H,SAAS,CAACwH,MAAX,EAAmBxH,SAAS,CAAC2H,MAA7B,CAApB,CAd8C;;AAgBlE;AACJ;AACA;AACInG,IAAAA,WAAW,EAAExB,SAAS,CAACwH,MAnB2C;;AAqBlE;AACJ;AACA;AACIjE,IAAAA,cAAc,EAAEvD,SAAS,CAACwH,MAxBwC;;AA0BlE;AACJ;AACA;AACI1F,IAAAA,MAAM,EAAE9B,SAAS,CAACwH,MA7BgD;;AA+BlE;AACJ;AACA;AACIlG,IAAAA,KAAK,EAAEtB,SAAS,CAAC2H;AAlCiD,GAApE,GAmCI,KAAK,CAnCT;AAoCA,SAAO;AACLvE,IAAAA,eAAe,EAAfA,eADK;AAELP,IAAAA,cAAc,EAAdA,cAFK;AAGLpC,IAAAA,wBAAwB,EAAxBA;AAHK,GAAP;AAKD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@mui/utils\";\nconst _excluded = [\"colorSchemes\"],\n      _excluded2 = [\"colorSchemes\"],\n      _excluded3 = [\"components\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { GlobalStyles } from '@mui/styled-engine';\nimport { deepmerge, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport createSpacing from '../createTheme/createSpacing';\nimport createBreakpoints from '../createTheme/createBreakpoints';\nimport cssVarsParser from './cssVarsParser';\nimport ThemeProvider from '../ThemeProvider';\nimport getInitColorSchemeScript, { DEFAULT_ATTRIBUTE, DEFAULT_MODE_STORAGE_KEY } from './getInitColorSchemeScript';\nimport useCurrentColorScheme from './useCurrentColorScheme';\nimport createGetCssVar from './createGetCssVar';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nexport default function createCssVarsProvider(options) {\n  var _baseTheme$breakpoint;\n\n  const {\n    theme: baseTheme = {},\n    defaultMode: desisgnSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange = false,\n    enableColorScheme = true,\n    prefix: designSystemPrefix = '',\n    shouldSkipGeneratingVar\n  } = options;\n  const systemSpacing = createSpacing(baseTheme.spacing);\n  const systemBreakpoints = createBreakpoints((_baseTheme$breakpoint = baseTheme.breakpoints) != null ? _baseTheme$breakpoint : {});\n\n  if (!baseTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !baseTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !baseTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : _formatMuiErrorMessage(19));\n    }\n\n    return value;\n  };\n\n  function CssVarsProvider({\n    children,\n    theme: themeProp = {},\n    prefix = designSystemPrefix,\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    attribute = DEFAULT_ATTRIBUTE,\n    defaultMode = desisgnSystemMode,\n    defaultColorScheme = designSystemColorScheme\n  }) {\n    // make sure that baseTheme is always independent of each <CssVarsProvider /> call.\n    // JSON.parse(JSON.stringify(...)) is okay to be used as long as the baseTheme is a plain object.\n    const clonedBaseTheme = React.useMemo(() => JSON.parse(JSON.stringify(baseTheme)), []);\n\n    const {\n      colorSchemes: baseColorSchemes = {}\n    } = clonedBaseTheme,\n          restBaseTheme = _objectWithoutPropertiesLoose(clonedBaseTheme, _excluded);\n\n    const {\n      colorSchemes: colorSchemesProp = {}\n    } = themeProp,\n          restThemeProp = _objectWithoutPropertiesLoose(themeProp, _excluded2);\n\n    const hasMounted = React.useRef(false); // eslint-disable-next-line prefer-const\n\n    let _deepmerge = deepmerge(restBaseTheme, restThemeProp),\n        {\n      components = {}\n    } = _deepmerge,\n        mergedTheme = _objectWithoutPropertiesLoose(_deepmerge, _excluded3);\n\n    const colorSchemes = deepmerge(baseColorSchemes, colorSchemesProp);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n    const {\n      mode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme,\n      setColorScheme\n    } = useCurrentColorScheme({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      defaultMode\n    });\n\n    const resolvedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (defaultMode === 'dark') {\n          return defaultDarkColorScheme;\n        } // use light color scheme, if default mode is 'light' | 'auto'\n\n\n        return defaultLightColorScheme;\n      }\n\n      return colorScheme;\n    })();\n\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = cssVarsParser(mergedTheme, {\n      prefix,\n      basePrefix: designSystemPrefix,\n      shouldSkipGeneratingVar\n    });\n    mergedTheme = _extends({}, mergedTheme, colorSchemes[resolvedColorScheme], {\n      components,\n      colorSchemes,\n      vars: rootVars,\n      spacing: themeProp.spacing ? createSpacing(themeProp.spacing) : systemSpacing,\n      breakpoints: themeProp.breakpoints ? createBreakpoints(themeProp.breakpoints) : systemBreakpoints,\n      getCssVar: createGetCssVar(prefix)\n    });\n    const styleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = cssVarsParser(scheme, {\n        prefix,\n        basePrefix: designSystemPrefix,\n        shouldSkipGeneratingVar\n      });\n      mergedTheme.vars = deepmerge(mergedTheme.vars, vars);\n\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n\n        return defaultColorScheme.light;\n      })();\n\n      if (key === resolvedDefaultColorScheme) {\n        styleSheet[':root'] = css;\n      } else {\n        styleSheet[`[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    React.useEffect(() => {\n      if (colorScheme) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        document.documentElement.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute]);\n    useEnhancedEffect(() => {\n      if (!mode || !enableColorScheme) {\n        return undefined;\n      }\n\n      const priorColorScheme = document.documentElement.style.getPropertyValue('color-scheme'); // `color-scheme` tells browser to render built-in elements according to its value: `light` or `dark`\n\n      if (mode === 'system') {\n        document.documentElement.style.setProperty('color-scheme', systemMode);\n      } else {\n        document.documentElement.style.setProperty('color-scheme', mode);\n      }\n\n      return () => {\n        document.documentElement.style.setProperty('color-scheme', priorColorScheme);\n      };\n    }, [mode, systemMode]);\n    React.useEffect(() => {\n      let timer;\n\n      if (disableTransitionOnChange && hasMounted.current) {\n        // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n        const css = document.createElement('style');\n        css.appendChild(document.createTextNode(DISABLE_CSS_TRANSITION));\n        document.head.appendChild(css); // Force browser repaint\n\n        (() => window.getComputedStyle(document.body))();\n\n        timer = setTimeout(() => {\n          document.head.removeChild(css);\n        }, 1);\n      }\n\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    return /*#__PURE__*/_jsxs(ColorSchemeContext.Provider, {\n      value: {\n        mode,\n        setMode,\n        lightColorScheme,\n        darkColorScheme,\n        colorScheme,\n        setColorScheme,\n        allColorSchemes\n      },\n      children: [/*#__PURE__*/_jsx(GlobalStyles, {\n        styles: {\n          ':root': rootCss\n        }\n      }), /*#__PURE__*/_jsx(GlobalStyles, {\n        styles: styleSheet\n      }), /*#__PURE__*/_jsx(ThemeProvider, {\n        theme: mergedTheme,\n        children: children\n      })]\n    });\n  }\n\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: PropTypes.string,\n\n    /**\n     * The component tree.\n     */\n    children: PropTypes.node,\n\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\n    /**\n     * The initial mode used.\n     */\n    defaultMode: PropTypes.string,\n\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: PropTypes.string,\n\n    /**\n     * CSS variable prefix.\n     */\n    prefix: PropTypes.string,\n\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: PropTypes.object\n  } : void 0;\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}"]},"metadata":{},"sourceType":"module"}