{"ast":null,"code":"import { mix } from './mix.mjs';\nimport { hsla, rgba, hex } from 'style-value-types';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\n\nvar mixLinearColor = function mixLinearColor(from, to, v) {\n  var fromExpo = from * from;\n  var toExpo = to * to;\n  return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\n\nvar colorTypes = [hex, rgba, hsla];\n\nvar getColorType = function getColorType(v) {\n  return colorTypes.find(function (type) {\n    return type.test(v);\n  });\n};\n\nvar notAnimatable = function notAnimatable(color) {\n  return \"'\".concat(color, \"' is not an animatable color. Use the equivalent color code instead.\");\n};\n\nvar mixColor = function mixColor(from, to) {\n  var fromColorType = getColorType(from);\n  var toColorType = getColorType(to);\n  invariant(!!fromColorType, notAnimatable(from));\n  invariant(!!toColorType, notAnimatable(to));\n  var fromColor = fromColorType.parse(from);\n  var toColor = toColorType.parse(to);\n\n  if (fromColorType === hsla) {\n    fromColor = hslaToRgba(fromColor);\n    fromColorType = rgba;\n  }\n\n  if (toColorType === hsla) {\n    toColor = hslaToRgba(toColor);\n    toColorType = rgba;\n  }\n\n  var blended = Object.assign({}, fromColor);\n  return function (v) {\n    for (var key in blended) {\n      if (key !== \"alpha\") {\n        blended[key] = mixLinearColor(fromColor[key], toColor[key], v);\n      }\n    }\n\n    blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n    return fromColorType.transform(blended);\n  };\n};\n\nexport { mixColor, mixLinearColor };","map":{"version":3,"sources":["/Users/chintansawla/Documents/GitHub/personal-website/node_modules/popmotion/dist/es/utils/mix-color.mjs"],"names":["mix","hsla","rgba","hex","invariant","hslaToRgba","mixLinearColor","from","to","v","fromExpo","toExpo","Math","sqrt","max","colorTypes","getColorType","find","type","test","notAnimatable","color","mixColor","fromColorType","toColorType","fromColor","parse","toColor","blended","Object","assign","key","alpha","transform"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,GAArB,QAAgC,mBAAhC;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAOC,EAAP,EAAWC,CAAX,EAAiB;AACpC,MAAMC,QAAQ,GAAGH,IAAI,GAAGA,IAAxB;AACA,MAAMI,MAAM,GAAGH,EAAE,GAAGA,EAApB;AACA,SAAOI,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYL,CAAC,IAAIE,MAAM,GAAGD,QAAb,CAAD,GAA0BA,QAAtC,CAAV,CAAP;AACH,CAJD;;AAKA,IAAMK,UAAU,GAAG,CAACZ,GAAD,EAAMD,IAAN,EAAYD,IAAZ,CAAnB;;AACA,IAAMe,YAAY,GAAG,SAAfA,YAAe,CAACP,CAAD;AAAA,SAAOM,UAAU,CAACE,IAAX,CAAgB,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACC,IAAL,CAAUV,CAAV,CAAV;AAAA,GAAhB,CAAP;AAAA,CAArB;;AACA,IAAMW,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD;AAAA,oBAAeA,KAAf;AAAA,CAAtB;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACf,IAAD,EAAOC,EAAP,EAAc;AAC3B,MAAIe,aAAa,GAAGP,YAAY,CAACT,IAAD,CAAhC;AACA,MAAIiB,WAAW,GAAGR,YAAY,CAACR,EAAD,CAA9B;AACAJ,EAAAA,SAAS,CAAC,CAAC,CAACmB,aAAH,EAAkBH,aAAa,CAACb,IAAD,CAA/B,CAAT;AACAH,EAAAA,SAAS,CAAC,CAAC,CAACoB,WAAH,EAAgBJ,aAAa,CAACZ,EAAD,CAA7B,CAAT;AACA,MAAIiB,SAAS,GAAGF,aAAa,CAACG,KAAd,CAAoBnB,IAApB,CAAhB;AACA,MAAIoB,OAAO,GAAGH,WAAW,CAACE,KAAZ,CAAkBlB,EAAlB,CAAd;;AACA,MAAIe,aAAa,KAAKtB,IAAtB,EAA4B;AACxBwB,IAAAA,SAAS,GAAGpB,UAAU,CAACoB,SAAD,CAAtB;AACAF,IAAAA,aAAa,GAAGrB,IAAhB;AACH;;AACD,MAAIsB,WAAW,KAAKvB,IAApB,EAA0B;AACtB0B,IAAAA,OAAO,GAAGtB,UAAU,CAACsB,OAAD,CAApB;AACAH,IAAAA,WAAW,GAAGtB,IAAd;AACH;;AACD,MAAM0B,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,SAAlB,CAAhB;AACA,SAAO,UAAChB,CAAD,EAAO;AACV,SAAK,IAAMsB,GAAX,IAAkBH,OAAlB,EAA2B;AACvB,UAAIG,GAAG,KAAK,OAAZ,EAAqB;AACjBH,QAAAA,OAAO,CAACG,GAAD,CAAP,GAAezB,cAAc,CAACmB,SAAS,CAACM,GAAD,CAAV,EAAiBJ,OAAO,CAACI,GAAD,CAAxB,EAA+BtB,CAA/B,CAA7B;AACH;AACJ;;AACDmB,IAAAA,OAAO,CAACI,KAAR,GAAgBhC,GAAG,CAACyB,SAAS,CAACO,KAAX,EAAkBL,OAAO,CAACK,KAA1B,EAAiCvB,CAAjC,CAAnB;AACA,WAAOc,aAAa,CAACU,SAAd,CAAwBL,OAAxB,CAAP;AACH,GARD;AASH,CAzBD;;AA2BA,SAASN,QAAT,EAAmBhB,cAAnB","sourcesContent":["import { mix } from './mix.mjs';\nimport { hsla, rgba, hex } from 'style-value-types';\nimport { invariant } from 'hey-listen';\nimport { hslaToRgba } from './hsla-to-rgba.mjs';\n\nconst mixLinearColor = (from, to, v) => {\n    const fromExpo = from * from;\n    const toExpo = to * to;\n    return Math.sqrt(Math.max(0, v * (toExpo - fromExpo) + fromExpo));\n};\nconst colorTypes = [hex, rgba, hsla];\nconst getColorType = (v) => colorTypes.find((type) => type.test(v));\nconst notAnimatable = (color) => `'${color}' is not an animatable color. Use the equivalent color code instead.`;\nconst mixColor = (from, to) => {\n    let fromColorType = getColorType(from);\n    let toColorType = getColorType(to);\n    invariant(!!fromColorType, notAnimatable(from));\n    invariant(!!toColorType, notAnimatable(to));\n    let fromColor = fromColorType.parse(from);\n    let toColor = toColorType.parse(to);\n    if (fromColorType === hsla) {\n        fromColor = hslaToRgba(fromColor);\n        fromColorType = rgba;\n    }\n    if (toColorType === hsla) {\n        toColor = hslaToRgba(toColor);\n        toColorType = rgba;\n    }\n    const blended = Object.assign({}, fromColor);\n    return (v) => {\n        for (const key in blended) {\n            if (key !== \"alpha\") {\n                blended[key] = mixLinearColor(fromColor[key], toColor[key], v);\n            }\n        }\n        blended.alpha = mix(fromColor.alpha, toColor.alpha, v);\n        return fromColorType.transform(blended);\n    };\n};\n\nexport { mixColor, mixLinearColor };\n"]},"metadata":{},"sourceType":"module"}